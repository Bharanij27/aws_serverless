service: cognito-user-pool

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: us-east-2
  stage: ${self:custom.currentStage}
  logRetentionInDays: 30
  timeout: 30
  vpc:
    securityGroupIds:
      - sg-eb76709d
    subnetIds:
      - subnet-84a020ef
      - subnet-4828d635

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: test-user-pool-${self:custom.currentStage}
  userPoolClientName: test-user-pool-client-${self:custom.currentStage}

functions:
  PokemonLambda:
    handler: handler.pokemons
    events:
      - http:
          path: /pokemons
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: 'http://localhost:3000'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes: 
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
    MyDB:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: demodb
        AllocatedStorage: '5'
        DBInstanceClass: db.t2.micro
        Engine: MySQL
        MasterUsername: admin
        MasterUserPassword: password
        PubliclyAccessible: false
        Port: 3306
  Outputs:
    Cluster:
      Description: The DB Cluster Name
      Value: !Ref MyDB
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolArn-${self:custom.currentStage}
